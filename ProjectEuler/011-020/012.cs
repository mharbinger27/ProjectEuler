using System;
using System.Collections.Generic;
using System.Text;

namespace ProjectEuler
{
    public static class _012
    {
        // TITLE: Highly divisible triangular number

        // DESCRIPTION: The sequence of triangle numbers is generated by adding the natural 
        //      numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
        //      The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        //      Let us list the factors of the first seven triangle numbers:
        //      1: 1
        //      3: 1,3
        //      6: 1,2,3,6
        //      10: 1,2,5,10
        //      15: 1,3,5,15
        //      21: 1,3,7,21
        //      28: 1,2,4,7,14,28
        //      We can see that 28 is the first triangle number to have over five divisors.

        // OBJECTIVE: What is the value of the first triangle number to 
        //      have over five hundred divisors?

        public static void DoWork(int numberOfDivisors)
        {
            long triangleSum = 0;
            int divisorCount;

            for (long i = 1; i < long.MaxValue; i++)
            {
                divisorCount = 0;
                triangleSum += i;

                if ((i >= numberOfDivisors) && (triangleSum % 2 == 0))
                {
                    divisorCount = CheckDivisorCount(triangleSum);
                }

                if (divisorCount >= numberOfDivisors)
                {
                    break;
                }
            }

            Console.WriteLine($"12: {triangleSum}");
        }

        public static int CheckDivisorCount(long valueToCheck)
        {
            int numberOfDivisors = 0;
            
            for (long i = 1; i <= valueToCheck; i++)
            {
                if (valueToCheck % i == 0)
                {
                    numberOfDivisors++;
                }
            }            

            return numberOfDivisors;
        }
    }
}
